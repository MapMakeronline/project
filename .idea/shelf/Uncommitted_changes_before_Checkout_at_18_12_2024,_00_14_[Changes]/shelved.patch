Index: backend/requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>asgiref==3.8.1\nDjango==5.1.4\nsqlparse==0.5.3\npsycopg2-binary==2.9.10\npython-dotenv~=1.0.1
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/requirements.txt b/backend/requirements.txt
--- a/backend/requirements.txt	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/requirements.txt	(date 1734446508771)
@@ -1,5 +1,19 @@
 asgiref==3.8.1
+certifi==2024.8.30
+cffi==1.17.1
+charset-normalizer==3.4.0
+cryptography==44.0.0
 Django==5.1.4
-sqlparse==0.5.3
+django-allauth==65.3.0
+django-cors-headers==4.6.0
+django-vite==3.0.5
+djangorestframework==3.15.2
+idna==3.10
+jwt==1.3.1
 psycopg2-binary==2.9.10
-python-dotenv~=1.0.1
\ No newline at end of file
+pycparser==2.22
+PyJWT==2.8.0
+python-dotenv==1.0.1
+requests==2.32.3
+sqlparse==0.5.3
+urllib3==2.2.3
Index: backend/core_app/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom allauth.socialaccount.models import SocialAccount\n\nUser = get_user_model()\n\nclass UserSerializer(serializers.ModelSerializer):\n    picture = serializers.SerializerMethodField()\n    name = serializers.SerializerMethodField()\n\n    class Meta:\n        model = User\n        fields = ['id', 'email', 'name', 'picture']\n\n    def get_picture(self, obj):\n        try:\n            social_account = obj.socialaccount_set.get(provider='google')\n            return social_account.extra_data.get('picture', '')\n        except SocialAccount.DoesNotExist:\n            return ''\n\n    def get_name(self, obj):\n        try:\n            social_account = obj.socialaccount_set.get(provider='google')\n            return social_account.extra_data.get('name', obj.get_full_name())\n        except SocialAccount.DoesNotExist:\n            return obj.get_full_name() or obj.email
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/core_app/serializers.py b/backend/core_app/serializers.py
--- a/backend/core_app/serializers.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/core_app/serializers.py	(date 1734441296191)
@@ -1,9 +1,12 @@
-from rest_framework import serializers
-from django.contrib.auth import get_user_model
 from allauth.socialaccount.models import SocialAccount
+from django.contrib.auth import get_user_model
+from rest_framework import serializers
+
+from .models import Section, Folder, FileRecord
 
 User = get_user_model()
 
+
 class UserSerializer(serializers.ModelSerializer):
     picture = serializers.SerializerMethodField()
     name = serializers.SerializerMethodField()
@@ -24,4 +27,38 @@
             social_account = obj.socialaccount_set.get(provider='google')
             return social_account.extra_data.get('name', obj.get_full_name())
         except SocialAccount.DoesNotExist:
-            return obj.get_full_name() or obj.email
\ No newline at end of file
+            return obj.get_full_name() or obj.email
+
+
+class FileRecordSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = FileRecord
+        fields = ['id', 'name', 'file_type', 'order', 'created_at']
+        read_only_fields = ['id', 'created_at']
+
+
+class FolderSerializer(serializers.ModelSerializer):
+    files = FileRecordSerializer(many=True, read_only=True)
+
+    class Meta:
+        model = Folder
+        fields = ['id', 'name', 'order', 'files', 'created_at']
+        read_only_fields = ['id', 'created_at']
+
+
+class SectionSerializer(serializers.ModelSerializer):
+    folders = FolderSerializer(many=True, read_only=True)
+
+    class Meta:
+        model = Section
+        fields = ['id', 'name', 'order', 'folders', 'created_at']
+        read_only_fields = ['id', 'created_at']
+
+
+class SectionTreeSerializer(serializers.ModelSerializer):
+    """Сериализатор для получения полного дерева"""
+    folders = FolderSerializer(many=True, read_only=True)
+
+    class Meta:
+        model = Section
+        fields = ['id', 'name', 'order', 'folders']
Index: backend/core/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for core project.\n\nGenerated by 'django-admin startproject' using Django 5.1.4.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\nfrom dotenv import load_dotenv\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nload_dotenv()\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\nREACT_BUILD_PATH_STATIC = '/Users/ernestilchenko/project/frontend/build/static'\nREACT_BUILD_PATH = '/Users/ernestilchenko/project/frontend/build'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# CSRF_TRUSTED_ORIGINS = [\n#     'https://backend-1004166685896.europe-central2.run.app',\n#     'https://frontend-1004166685896.europe-central2.run.app'\n# ]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:3000\",\n    \"http://127.0.0.1:3000\",\n]\nCORS_ALLOW_CREDENTIALS = True\nCORS_ORIGIN_ALLOW_ALL = True\nCORS_ALLOWED_CREDENTIALS = True\nAPPEND_SLASH = False\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.sites',\n    'rest_framework',\n    'allauth',\n    'allauth.account',\n    'allauth.socialaccount',\n    'allauth.socialaccount.providers.google',\n    'corsheaders',\n    'core_app'\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'allauth.account.middleware.AccountMiddleware',\n]\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n]\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n    ],\n}\nSITE_ID = 1\nSOCIALACCOUNT_LOGIN_ON_GET = True\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_USERNAME_REQUIRED = False\nACCOUNT_AUTHENTICATION_METHOD = 'email'\nACCOUNT_EMAIL_VERIFICATION = 'none'\nLOGIN_REDIRECT_URL = 'http://localhost:3000/'\nLOGOUT_REDIRECT_URL = 'http://localhost:3000/'\nROOT_URLCONF = 'core.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [REACT_BUILD_PATH],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'core.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),\n        'PORT': os.getenv('DB_PORT'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = 'static/'\n\nSTATICFILES_DIRS = [\n    REACT_BUILD_PATH_STATIC,\n]\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSESSION_COOKIE_SECURE = False\nSESSION_COOKIE_SAMESITE = 'Lax'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/core/settings.py b/backend/core/settings.py
--- a/backend/core/settings.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/core/settings.py	(date 1734442728471)
@@ -29,10 +29,12 @@
 # SECURITY WARNING: don't run with debug turned on in production!
 DEBUG = True
 ALLOWED_HOSTS = ['*']
-# CSRF_TRUSTED_ORIGINS = [
-#     'https://backend-1004166685896.europe-central2.run.app',
-#     'https://frontend-1004166685896.europe-central2.run.app'
-# ]
+CSRF_TRUSTED_ORIGINS = [
+    # 'https://backend-1004166685896.europe-central2.run.app',
+    # 'https://frontend-1004166685896.europe-central2.run.app'
+    "http://localhost:3000",
+    "http://127.0.0.1:3000",
+]
 CORS_ALLOWED_ORIGINS = [
     "http://localhost:3000",
     "http://127.0.0.1:3000",
@@ -167,3 +169,12 @@
 DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
 SESSION_COOKIE_SECURE = False
 SESSION_COOKIE_SAMESITE = 'Lax'
+CORS_ALLOW_METHODS = [
+    'DELETE',
+    'GET',
+    'OPTIONS',
+    'PATCH',
+    'POST',
+    'PUT',
+]
+CSRF_COOKIE_SECURE = False
Index: frontend/src/components/LayerTree/LayerTree.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState } from 'react';\nimport { Plus } from 'lucide-react';\nimport {\n  DndContext,\n  DragEndEvent,\n  closestCenter,\n  DragStartEvent,\n  DragOverlay,\n  useSensor,\n  useSensors,\n  PointerSensor\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  verticalListSortingStrategy,\n  arrayMove\n} from '@dnd-kit/sortable';\nimport { MinimizeButton } from '../common/MinimizeButton';\nimport { SwipeHandler } from '../common/SwipeHandler';\nimport { useHeaderStore } from '../../store/headerStore';\nimport { CustomSection } from './CustomSection';\nimport { LayerSection } from './LayerSection';\nimport { useLayerOrderStore} from '../../store/layerOrderStore';\nimport { useCustomSectionsStore } from '../../store/customSectionsStore';\nimport { SectionNameModal } from './SectionCreation';\n\nexport function LayerTree() {\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const headerIsMinimized = useHeaderStore((state) => state.isMinimized);\n  const { order, setOrder, addSection } = useLayerOrderStore();\n  const { addSection: addCustomSection } = useCustomSectionsStore();\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    })\n  );\n\n  const handleSwipe = (direction: 'left' | 'right' | 'up' | 'down') => {\n    if (direction === 'left') {\n      setIsMinimized(true);\n    } else if (direction === 'right') {\n      setIsMinimized(false);\n    }\n  };\n\n  const handleDragStart = (event: DragStartEvent) => {\n    setActiveId(event.active.id as string);\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      const oldIndex = order.indexOf(active.id as string);\n      const newIndex = order.indexOf(over.id as string);\n      setOrder(arrayMove(order, oldIndex, newIndex));\n    }\n\n    setActiveId(null);\n  };\n\n  const handleCreateSection = (name: string) => {\n    const id = addCustomSection(name);\n    addSection(id);\n  };\n\n\n  const renderSection = (id: string) => {\n    return <CustomSection sectionId={id} />;\n  };\n\n  return (\n    <SwipeHandler onSwipe={handleSwipe} className={`fixed left-0 transition-all duration-300 bg-white/90 backdrop-blur-sm shadow-lg z-30 ${\n      headerIsMinimized ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]'\n    } ${\n      isMinimized ? '-translate-x-full' : 'translate-x-0'\n    }`}>\n      <div className=\"w-full md:w-72 h-full relative\">\n        <div className=\"p-2 space-y-2 overflow-auto h-[calc(100%-4rem)]\">\n          <button\n            onClick={() => setIsModalOpen(true)}\n            className=\"w-full px-3 py-2 flex items-center gap-2 bg-gray-50 hover:bg-gray-100 rounded-lg\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span className=\"text-sm text-gray-600\">Add New Section</span>\n          </button>\n\n          <SectionNameModal\n            isOpen={isModalOpen}\n            onClose={() => setIsModalOpen(false)}\n            onSubmit={handleCreateSection}\n          />\n\n          <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n          >\n            <SortableContext\n              items={order}\n              strategy={verticalListSortingStrategy}\n            >\n              <div className=\"space-y-2\">\n                {order.map((id) => (\n                  <LayerSection key={id} id={id}>\n                    {renderSection(id)}\n                  </LayerSection>\n                ))}\n              </div>\n            </SortableContext>\n\n            <DragOverlay>\n              {activeId ? (\n                <div className=\"opacity-80 bg-white rounded-lg shadow-lg\">\n                  {renderSection(activeId)}\n                </div>\n              ) : null}\n            </DragOverlay>\n          </DndContext>\n        </div>\n        \n        <MinimizeButton\n          direction=\"left\"\n          isMinimized={isMinimized}\n          onClick={() => setIsMinimized(!isMinimized)}\n          className=\"absolute -right-4 top-1/2 transform translate-x-full -translate-y-1/2\"\n        />\n      </div>\n    </SwipeHandler>\n  );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/LayerTree/LayerTree.tsx b/frontend/src/components/LayerTree/LayerTree.tsx
--- a/frontend/src/components/LayerTree/LayerTree.tsx	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/frontend/src/components/LayerTree/LayerTree.tsx	(date 1734443886404)
@@ -1,137 +1,295 @@
-import { useState } from 'react';
-import { Plus } from 'lucide-react';
+import {useEffect, useState} from 'react';
+import {Plus} from 'lucide-react';
 import {
-  DndContext,
-  DragEndEvent,
-  closestCenter,
-  DragStartEvent,
-  DragOverlay,
-  useSensor,
-  useSensors,
-  PointerSensor
+    closestCenter,
+    DndContext,
+    DragEndEvent,
+    DragOverlay,
+    DragStartEvent,
+    PointerSensor,
+    useSensor,
+    useSensors
 } from '@dnd-kit/core';
-import {
-  SortableContext,
-  verticalListSortingStrategy,
-  arrayMove
-} from '@dnd-kit/sortable';
-import { MinimizeButton } from '../common/MinimizeButton';
-import { SwipeHandler } from '../common/SwipeHandler';
-import { useHeaderStore } from '../../store/headerStore';
-import { CustomSection } from './CustomSection';
-import { LayerSection } from './LayerSection';
-import { useLayerOrderStore} from '../../store/layerOrderStore';
-import { useCustomSectionsStore } from '../../store/customSectionsStore';
-import { SectionNameModal } from './SectionCreation';
+import {arrayMove, SortableContext, verticalListSortingStrategy} from '@dnd-kit/sortable';
+import {MinimizeButton} from '../common/MinimizeButton';
+import {SwipeHandler} from '../common/SwipeHandler';
+import {useHeaderStore} from '../../store/headerStore';
+import {CustomSection} from './CustomSection';
+import {LayerSection} from './LayerSection';
+import {useLayerOrderStore} from '../../store/layerOrderStore';
+import {useCustomSectionsStore} from '../../store/customSectionsStore';
+import {SectionNameModal} from './SectionCreation';
 
+// Common headers with CSRF token
+function getCsrfToken(): string | null {
+    const name = 'csrftoken';
+    let cookieValue = null;
+    if (document.cookie && document.cookie !== '') {
+        const cookies = document.cookie.split(';');
+        for (let i = 0; i < cookies.length; i++) {
+            const cookie = cookies[i].trim();
+            if (cookie.substring(0, name.length + 1) === (name + '=')) {
+                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
+                break;
+            }
+        }
+    }
+
+    if (!cookieValue) {
+        const metaTag = document.querySelector('meta[name="csrf-token"]');
+        if (metaTag) {
+            cookieValue = metaTag.getAttribute('content');
+        }
+    }
+
+    return cookieValue;
+}
+
+async function ensureCsrfCookie(): Promise<void> {
+    try {
+        await fetch('http://127.0.0.1:8000/api/csrf/', {
+            method: 'GET',
+            credentials: 'include',
+        });
+    } catch (error) {
+        console.error('Error setting CSRF cookie:', error);
+    }
+}
+
+const getHeaders = () => {
+    const csrfToken = getCsrfToken();
+    if (!csrfToken) {
+        console.warn('CSRF token not found');
+    }
+    return {
+        'Content-Type': 'application/json',
+        'X-CSRFToken': csrfToken || '',
+    };
+};
+
+export const sectionsApi = {
+    getSections: async (): Promise<CustomSection[]> => {
+        await ensureCsrfCookie();
+        console.log(getHeaders())
+        const response = await fetch('http://127.0.0.1:8000/api/sections/', {
+            method: 'GET',
+            headers: getHeaders(),
+            credentials: 'include'
+        });
+        if (!response.ok) {
+            throw new Error('Failed to fetch sections');
+        }
+        return response.json();
+    },
+
+    createSection: async (name: string): Promise<CustomSection> => {
+        await ensureCsrfCookie();
+        console.log(getHeaders())
+        const response = await fetch('http://127.0.0.1:8000/api/sections/', {
+            method: 'POST',
+            headers: getHeaders(),
+            credentials: 'include',
+            body: JSON.stringify({ name })
+        });
+        if (!response.ok) {
+            throw new Error('Failed to create section');
+        }
+        return response.json();
+    },
+
+    updateSection: async (sectionId: string, data: any): Promise<CustomSection> => {
+        const response = await fetch(`http://127.0.0.1:8000/api/sections/${sectionId}/`, {
+            method: 'PUT',
+            headers: getHeaders(),
+            credentials: 'include',
+            body: JSON.stringify(data)
+        });
+        if (!response.ok) {
+            throw new Error('Failed to update section');
+        }
+        return response.json();
+    },
+
+    deleteSection: async (sectionId: string): Promise<void> => {
+        const response = await fetch(`http://127.0.0.1:8000/api/sections/${sectionId}/`, {
+            method: 'DELETE',
+            headers: getHeaders(),
+            credentials: 'include'
+        });
+        if (!response.ok) {
+            throw new Error('Failed to delete section');
+        }
+    }
+};
+
 export function LayerTree() {
-  const [isMinimized, setIsMinimized] = useState(false);
-  const [activeId, setActiveId] = useState<string | null>(null);
-  const [isModalOpen, setIsModalOpen] = useState(false);
-  const headerIsMinimized = useHeaderStore((state) => state.isMinimized);
-  const { order, setOrder, addSection } = useLayerOrderStore();
-  const { addSection: addCustomSection } = useCustomSectionsStore();
+    const [isMinimized, setIsMinimized] = useState(false);
+    const [activeId, setActiveId] = useState<string | null>(null);
+    const [isModalOpen, setIsModalOpen] = useState(false);
+    const [isLoading, setIsLoading] = useState(true);
+    const headerIsMinimized = useHeaderStore((state) => state.isMinimized);
+    const {order, setOrder, addSection, removeSection} = useLayerOrderStore();
+    const {addCustomSection, removeCustomSection} = useCustomSectionsStore();
+
+    useEffect(() => {
+        const loadSections = async () => {
+            try {
+                const sections = await sectionsApi.getSections();
+                const sectionIds = sections.map((section: CustomSection) => section.id);
+                setOrder(sectionIds);
+                sections.forEach((section: CustomSection) => {
+                    addCustomSection(section);
+                });
+                setIsLoading(false);
+            } catch (error) {
+                console.error('Error loading sections:', error);
+                setIsLoading(false);
+            }
+        };
+
+        loadSections();
+    }, [setOrder, addCustomSection]);
 
-  const sensors = useSensors(
-    useSensor(PointerSensor, {
-      activationConstraint: {
-        distance: 8,
-      },
-    })
-  );
+    const sensors = useSensors(
+        useSensor(PointerSensor, {
+            activationConstraint: {
+                distance: 8,
+            },
+        })
+    );
 
-  const handleSwipe = (direction: 'left' | 'right' | 'up' | 'down') => {
-    if (direction === 'left') {
-      setIsMinimized(true);
-    } else if (direction === 'right') {
-      setIsMinimized(false);
-    }
-  };
+    const handleSwipe = (direction: 'left' | 'right' | 'up' | 'down') => {
+        if (direction === 'left') {
+            setIsMinimized(true);
+        } else if (direction === 'right') {
+            setIsMinimized(false);
+        }
+    };
 
-  const handleDragStart = (event: DragStartEvent) => {
-    setActiveId(event.active.id as string);
-  };
+    const handleDragStart = (event: DragStartEvent) => {
+        setActiveId(event.active.id as string);
+    };
 
-  const handleDragEnd = (event: DragEndEvent) => {
-    const { active, over } = event;
+    const handleDragEnd = async (event: DragEndEvent) => {
+        const {active, over} = event;
 
-    if (over && active.id !== over.id) {
-      const oldIndex = order.indexOf(active.id as string);
-      const newIndex = order.indexOf(over.id as string);
-      setOrder(arrayMove(order, oldIndex, newIndex));
-    }
+        if (over && active.id !== over.id) {
+            const oldIndex = order.indexOf(active.id as string);
+            const newIndex = order.indexOf(over.id as string);
+            const newOrder = arrayMove(order, oldIndex, newIndex);
+
+            try {
+                // Instead of using a separate reorder endpoint, we'll update each section's order
+                await Promise.all(
+                    newOrder.map((id, index) =>
+                        sectionsApi.updateSection(id, { order: index })
+                    )
+                );
+                setOrder(newOrder);
+            } catch (error) {
+                console.error('Error updating order:', error);
+                setOrder(order);
+            }
+        }
 
-    setActiveId(null);
-  };
+        setActiveId(null);
+    };
 
-  const handleCreateSection = (name: string) => {
-    const id = addCustomSection(name);
-    addSection(id);
-  };
+    const handleCreateSection = async (name: string) => {
+        try {
+            const section = await sectionsApi.createSection(name);
+            addCustomSection(section);
+            addSection(section.id);
+            setIsModalOpen(false);
+        } catch (error) {
+            console.error('Error creating section:', error);
+        }
+    };
 
+    const handleDeleteSection = async (sectionId: string) => {
+        try {
+            await sectionsApi.deleteSection(sectionId);
+            removeSection(sectionId);
+            removeCustomSection(sectionId);
+        } catch (error) {
+            console.error('Error deleting section:', error);
+        }
+    };
 
-  const renderSection = (id: string) => {
-    return <CustomSection sectionId={id} />;
-  };
-
-  return (
-    <SwipeHandler onSwipe={handleSwipe} className={`fixed left-0 transition-all duration-300 bg-white/90 backdrop-blur-sm shadow-lg z-30 ${
-      headerIsMinimized ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]'
-    } ${
-      isMinimized ? '-translate-x-full' : 'translate-x-0'
-    }`}>
-      <div className="w-full md:w-72 h-full relative">
-        <div className="p-2 space-y-2 overflow-auto h-[calc(100%-4rem)]">
-          <button
-            onClick={() => setIsModalOpen(true)}
-            className="w-full px-3 py-2 flex items-center gap-2 bg-gray-50 hover:bg-gray-100 rounded-lg"
-          >
-            <Plus className="w-4 h-4" />
-            <span className="text-sm text-gray-600">Add New Section</span>
-          </button>
+    const renderSection = (id: string) => {
+        return (
+            <CustomSection
+                sectionId={id}
+                onDelete={() => handleDeleteSection(id)}
+            />
+        );
+    };
+
+    if (isLoading) {
+        return <div className="p-4">Loading sections...</div>;
+    }
+
+    return (
+        <SwipeHandler
+            onSwipe={handleSwipe}
+            className={`fixed left-0 transition-all duration-300 bg-white/90 backdrop-blur-sm shadow-lg z-30 ${
+                headerIsMinimized ? 'top-0 h-screen' : 'top-16 h-[calc(100vh-4rem)]'
+            } ${
+                isMinimized ? '-translate-x-full' : 'translate-x-0'
+            }`}
+        >
+            <div className="w-full md:w-72 h-full relative">
+                <div className="p-2 space-y-2 overflow-auto h-[calc(100%-4rem)]">
+                    <button
+                        onClick={() => setIsModalOpen(true)}
+                        className="w-full px-3 py-2 flex items-center gap-2 bg-gray-50 hover:bg-gray-100 rounded-lg"
+                    >
+                        <Plus className="w-4 h-4"/>
+                        <span className="text-sm text-gray-600">Add New Section</span>
+                    </button>
 
-          <SectionNameModal
-            isOpen={isModalOpen}
-            onClose={() => setIsModalOpen(false)}
-            onSubmit={handleCreateSection}
-          />
+                    <SectionNameModal
+                        isOpen={isModalOpen}
+                        onClose={() => setIsModalOpen(false)}
+                        onSubmit={handleCreateSection}
+                    />
 
-          <DndContext
-            sensors={sensors}
-            collisionDetection={closestCenter}
-            onDragStart={handleDragStart}
-            onDragEnd={handleDragEnd}
-          >
-            <SortableContext
-              items={order}
-              strategy={verticalListSortingStrategy}
-            >
-              <div className="space-y-2">
-                {order.map((id) => (
-                  <LayerSection key={id} id={id}>
-                    {renderSection(id)}
-                  </LayerSection>
-                ))}
-              </div>
-            </SortableContext>
+                    <DndContext
+                        sensors={sensors}
+                        collisionDetection={closestCenter}
+                        onDragStart={handleDragStart}
+                        onDragEnd={handleDragEnd}
+                    >
+                        <SortableContext
+                            items={order}
+                            strategy={verticalListSortingStrategy}
+                        >
+                            <div className="space-y-2">
+                                {order.map((id) => (
+                                    <LayerSection key={id} id={id}>
+                                        {renderSection(id)}
+                                    </LayerSection>
+                                ))}
+                            </div>
+                        </SortableContext>
 
-            <DragOverlay>
-              {activeId ? (
-                <div className="opacity-80 bg-white rounded-lg shadow-lg">
-                  {renderSection(activeId)}
-                </div>
-              ) : null}
-            </DragOverlay>
-          </DndContext>
-        </div>
-        
-        <MinimizeButton
-          direction="left"
-          isMinimized={isMinimized}
-          onClick={() => setIsMinimized(!isMinimized)}
-          className="absolute -right-4 top-1/2 transform translate-x-full -translate-y-1/2"
-        />
-      </div>
-    </SwipeHandler>
-  );
+                        <DragOverlay>
+                            {activeId ? (
+                                <div className="opacity-80 bg-white rounded-lg shadow-lg">
+                                    {renderSection(activeId)}
+                                </div>
+                            ) : null}
+                        </DragOverlay>
+                    </DndContext>
+                </div>
+
+                <MinimizeButton
+                    direction="left"
+                    isMinimized={isMinimized}
+                    onClick={() => setIsMinimized(!isMinimized)}
+                    className="absolute -right-4 top-1/2 transform translate-x-full -translate-y-1/2"
+                />
+            </div>
+        </SwipeHandler>
+    );
 }
\ No newline at end of file
Index: backend/core_app/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.conf import settings\nfrom django.urls import path, re_path\nfrom django.views.generic import TemplateView\nfrom django.views.static import serve\n\nfrom .views import upload_file, get_user_info\n\nurlpatterns = [\n    path('api/auth/user/', get_user_info, name='user_info'),\n    path('api/upload/', upload_file, name='upload_file'),\n    re_path(r'^static/(?P<path>.*)$', serve, {'document_root': settings.REACT_BUILD_PATH + '/static'}),\n    re_path(r'^.*$', TemplateView.as_view(template_name='/Users/ernestilchenko/project/frontend/build/index.html')),\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/core_app/urls.py b/backend/core_app/urls.py
--- a/backend/core_app/urls.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/core_app/urls.py	(date 1734443346105)
@@ -1,13 +1,39 @@
 from django.conf import settings
-from django.urls import path, re_path
+from django.urls import path, re_path, include
 from django.views.generic import TemplateView
 from django.views.static import serve
 
-from .views import upload_file, get_user_info
+from .views import (
+    section_list, section_detail, section_tree, add_folder_to_section,
+    folder_list, folder_detail, add_file_to_folder,
+    file_list, file_detail,
+    csrf, upload_file, get_user_info
+)
 
 urlpatterns = [
+    # CSRF and Auth endpoints
+    path('api/csrf/', csrf, name='csrf'),
     path('api/auth/user/', get_user_info, name='user_info'),
+
+    # File upload endpoint
     path('api/upload/', upload_file, name='upload_file'),
+
+    # Section endpoints
+    path('api/sections/', section_list, name='section-list'),
+    path('api/sections/<int:pk>/', section_detail, name='section-detail'),
+    path('api/sections/tree/', section_tree, name='section-tree'),
+    path('api/sections/<int:pk>/add_folder/', add_folder_to_section, name='section-add-folder'),
+
+    # Folder endpoints
+    path('api/folders/', folder_list, name='folder-list'),
+    path('api/folders/<int:pk>/', folder_detail, name='folder-detail'),
+    path('api/folders/<int:pk>/add_file/', add_file_to_folder, name='folder-add-file'),
+
+    # File endpoints
+    path('api/files/', file_list, name='file-list'),
+    path('api/files/<int:pk>/', file_detail, name='file-detail'),
+
+    # Static and catch-all routes
     re_path(r'^static/(?P<path>.*)$', serve, {'document_root': settings.REACT_BUILD_PATH + '/static'}),
     re_path(r'^.*$', TemplateView.as_view(template_name='/Users/ernestilchenko/project/frontend/build/index.html')),
-]
+]
\ No newline at end of file
Index: backend/core_app/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\n\nfrom django.core.files.storage import default_storage\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\nfrom .models import UploadedFile\nfrom .serializers import UserSerializer\n\n\n# Create your views here.\n@csrf_exempt\ndef upload_file(request):\n    if request.method == 'POST':\n        file = request.FILES.get('file')\n\n        if not file:\n            return JsonResponse({'error': 'No file provided'}, status=400)\n\n        # Получаем имя файла без расширения для title\n        title = os.path.splitext(file.name)[0]\n\n        # Проверка расширения файла\n        allowed_extensions = ['.geojson', '.kml', '.shp', '.csv', '.gml']\n        file_ext = os.path.splitext(file.name)[1].lower()\n\n        if file_ext not in allowed_extensions:\n            return JsonResponse({'error': 'Invalid file type'}, status=400)\n\n        # Сохранение файла и создание записи в базе данных\n        file_path = os.path.join('uploads', file.name)\n        saved_path = default_storage.save(file_path, file)\n\n        try:\n            # Создание записи в базе данных\n            uploaded_file = UploadedFile.objects.create(\n                title=title,  # Используем имя файла без расширения\n                file=saved_path,\n                file_type=file_ext[1:]  # убираем точку из расширения\n            )\n\n            return JsonResponse({\n                'message': 'File uploaded successfully',\n                'file_path': saved_path,\n                'id': uploaded_file.id,\n                'title': title\n            })\n        except Exception as e:\n            return JsonResponse({\n                'error': str(e)\n            }, status=500)\n\n    return JsonResponse({'error': 'Invalid request method'}, status=405)\n\n\n@api_view(['GET'])\ndef get_user_info(request):\n    print(\"Session ID:\", request.session.session_key)\n    print(\"Is authenticated:\", request.user.is_authenticated)\n    print(\"User:\", request.user)\n    print(\"Cookies:\", request.COOKIES)\n\n    if not request.user.is_authenticated:\n        return Response({'isAuthenticated': False})\n\n    serializer = UserSerializer(request.user)\n    return Response({\n        **serializer.data,\n        'isAuthenticated': True\n    })\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/core_app/views.py b/backend/core_app/views.py
--- a/backend/core_app/views.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/core_app/views.py	(date 1734444156285)
@@ -1,13 +1,19 @@
 import os
 
 from django.core.files.storage import default_storage
-from django.http import JsonResponse
-from django.views.decorators.csrf import csrf_exempt
-from rest_framework.decorators import api_view
+from django.http import JsonResponse, HttpResponse
+from django.shortcuts import get_object_or_404
+from django.views.decorators.csrf import csrf_exempt, ensure_csrf_cookie
+from rest_framework.decorators import api_view, permission_classes
+from rest_framework.response import Response
+from rest_framework import viewsets, status
+from rest_framework.decorators import action
 from rest_framework.response import Response
-
-from .models import UploadedFile
-from .serializers import UserSerializer
+from rest_framework.permissions import IsAuthenticated
+from django.db import transaction
+from .models import UploadedFile, Folder, FileRecord, Section
+from .serializers import UserSerializer, SectionTreeSerializer, FolderSerializer, FileRecordSerializer, \
+    SectionSerializer
 
 
 # Create your views here.
@@ -70,3 +76,164 @@
         **serializer.data,
         'isAuthenticated': True
     })
+
+
+@api_view(['GET', 'POST'])
+@permission_classes([IsAuthenticated])
+def section_list(request):
+    if request.method == 'GET':
+        sections = Section.objects.filter(user=request.user).prefetch_related(
+            'folders',
+            'folders__files'
+        )
+        serializer = SectionSerializer(sections, many=True)
+        return Response(serializer.data)
+
+    elif request.method == 'POST':
+        serializer = SectionSerializer(data=request.data)
+        if serializer.is_valid():
+            serializer.save(user=request.user)
+            return Response(serializer.data, status=status.HTTP_201_CREATED)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+
+@api_view(['GET', 'PUT', 'DELETE'])
+@permission_classes([IsAuthenticated])
+def section_detail(request, pk):
+    section = get_object_or_404(Section, pk=pk, user=request.user)
+
+    if request.method == 'GET':
+        serializer = SectionSerializer(section)
+        return Response(serializer.data)
+
+    elif request.method == 'PUT':
+        serializer = SectionSerializer(section, data=request.data, partial=True)
+        if serializer.is_valid():
+            serializer.save()
+            return Response(serializer.data)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    elif request.method == 'DELETE':
+        section.delete()
+        return Response(status=status.HTTP_204_NO_CONTENT)
+
+
+@api_view(['GET'])
+@permission_classes([IsAuthenticated])
+def section_tree(request):
+    """Получить полное дерево секций с папками и файлами"""
+    sections = Section.objects.filter(user=request.user).prefetch_related(
+        'folders',
+        'folders__files'
+    ).order_by('order')
+    serializer = SectionTreeSerializer(sections, many=True)
+    return Response(serializer.data)
+
+
+@api_view(['POST'])
+@permission_classes([IsAuthenticated])
+def add_folder_to_section(request, pk):
+    """Добавить папку в секцию"""
+    section = get_object_or_404(Section, pk=pk, user=request.user)
+    serializer = FolderSerializer(data=request.data)
+
+    if serializer.is_valid():
+        serializer.save(section=section)
+        return Response(serializer.data, status=status.HTTP_201_CREATED)
+    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+
+@api_view(['GET', 'POST'])
+@permission_classes([IsAuthenticated])
+def folder_list(request):
+    if request.method == 'GET':
+        folders = Folder.objects.filter(section__user=request.user).prefetch_related('files')
+        serializer = FolderSerializer(folders, many=True)
+        return Response(serializer.data)
+
+    elif request.method == 'POST':
+        serializer = FolderSerializer(data=request.data)
+        if serializer.is_valid():
+            # Verify the section belongs to the user
+            section = get_object_or_404(Section, id=request.data.get('section'), user=request.user)
+            serializer.save(section=section)
+            return Response(serializer.data, status=status.HTTP_201_CREATED)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+
+@api_view(['GET', 'PUT', 'DELETE'])
+@permission_classes([IsAuthenticated])
+def folder_detail(request, pk):
+    folder = get_object_or_404(Folder, pk=pk, section__user=request.user)
+
+    if request.method == 'GET':
+        serializer = FolderSerializer(folder)
+        return Response(serializer.data)
+
+    elif request.method == 'PUT':
+        serializer = FolderSerializer(folder, data=request.data, partial=True)
+        if serializer.is_valid():
+            serializer.save()
+            return Response(serializer.data)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    elif request.method == 'DELETE':
+        folder.delete()
+        return Response(status=status.HTTP_204_NO_CONTENT)
+
+
+@api_view(['POST'])
+@permission_classes([IsAuthenticated])
+def add_file_to_folder(request, pk):
+    """Добавить файл в папку"""
+    folder = get_object_or_404(Folder, pk=pk, section__user=request.user)
+    serializer = FileRecordSerializer(data=request.data)
+
+    if serializer.is_valid():
+        serializer.save(folder=folder)
+        return Response(serializer.data, status=status.HTTP_201_CREATED)
+    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+
+@api_view(['GET', 'POST'])
+@permission_classes([IsAuthenticated])
+def file_list(request):
+    if request.method == 'GET':
+        files = FileRecord.objects.filter(folder__section__user=request.user)
+        serializer = FileRecordSerializer(files, many=True)
+        return Response(serializer.data)
+
+    elif request.method == 'POST':
+        serializer = FileRecordSerializer(data=request.data)
+        if serializer.is_valid():
+            # Verify the folder belongs to the user
+            folder = get_object_or_404(Folder, id=request.data.get('folder'), section__user=request.user)
+            serializer.save(folder=folder)
+            return Response(serializer.data, status=status.HTTP_201_CREATED)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+
+@api_view(['GET', 'PUT', 'DELETE'])
+@permission_classes([IsAuthenticated])
+def file_detail(request, pk):
+    file = get_object_or_404(FileRecord, pk=pk, folder__section__user=request.user)
+
+    if request.method == 'GET':
+        serializer = FileRecordSerializer(file)
+        return Response(serializer.data)
+
+    elif request.method == 'PUT':
+        serializer = FileRecordSerializer(file, data=request.data, partial=True)
+        if serializer.is_valid():
+            serializer.save()
+            return Response(serializer.data)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    elif request.method == 'DELETE':
+        file.delete()
+        return Response(status=status.HTTP_204_NO_CONTENT)
+
+
+@ensure_csrf_cookie
+def csrf(request):
+    return HttpResponse()
\ No newline at end of file
Index: backend/core_app/migrations/0007_uploadedfile_original_filename.py
===================================================================
diff --git a/backend/core_app/migrations/0007_uploadedfile_original_filename.py b/backend/core_app/migrations/0007_uploadedfile_original_filename.py
deleted file mode 100644
--- a/backend/core_app/migrations/0007_uploadedfile_original_filename.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,19 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-11 11:44
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0006_uploadedfile'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='uploadedfile',
-            name='original_filename',
-            field=models.CharField(default=1, max_length=255),
-            preserve_default=False,
-        ),
-    ]
Index: backend/core_app/migrations/0009_alter_uploadedfile_options_uploadedfile_table_name_and_more.py
===================================================================
diff --git a/backend/core_app/migrations/0009_alter_uploadedfile_options_uploadedfile_table_name_and_more.py b/backend/core_app/migrations/0009_alter_uploadedfile_options_uploadedfile_table_name_and_more.py
deleted file mode 100644
--- a/backend/core_app/migrations/0009_alter_uploadedfile_options_uploadedfile_table_name_and_more.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,27 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-11 12:09
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0008_alter_uploadedfile_options_and_more'),
-    ]
-
-    operations = [
-        migrations.AlterModelOptions(
-            name='uploadedfile',
-            options={},
-        ),
-        migrations.AddField(
-            model_name='uploadedfile',
-            name='table_name',
-            field=models.CharField(blank=True, max_length=63),
-        ),
-        migrations.AlterField(
-            model_name='uploadedfile',
-            name='title',
-            field=models.CharField(max_length=255),
-        ),
-    ]
Index: backend/core_app/migrations/0003_alter_csvfile_options.py
===================================================================
diff --git a/backend/core_app/migrations/0003_alter_csvfile_options.py b/backend/core_app/migrations/0003_alter_csvfile_options.py
deleted file mode 100644
--- a/backend/core_app/migrations/0003_alter_csvfile_options.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,17 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-10 14:25
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0002_remove_csvfile_title_delete_csvdata'),
-    ]
-
-    operations = [
-        migrations.AlterModelOptions(
-            name='csvfile',
-            options={'verbose_name': 'Plik CSV', 'verbose_name_plural': 'Pliki CSV'},
-        ),
-    ]
Index: backend/core_app/migrations/0008_alter_uploadedfile_options_and_more.py
===================================================================
diff --git a/backend/core_app/migrations/0008_alter_uploadedfile_options_and_more.py b/backend/core_app/migrations/0008_alter_uploadedfile_options_and_more.py
deleted file mode 100644
--- a/backend/core_app/migrations/0008_alter_uploadedfile_options_and_more.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,27 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-11 11:54
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0007_uploadedfile_original_filename'),
-    ]
-
-    operations = [
-        migrations.AlterModelOptions(
-            name='uploadedfile',
-            options={'verbose_name': 'Plik', 'verbose_name_plural': 'Pliki'},
-        ),
-        migrations.RemoveField(
-            model_name='uploadedfile',
-            name='original_filename',
-        ),
-        migrations.AddField(
-            model_name='uploadedfile',
-            name='title',
-            field=models.CharField(default=1, max_length=100, verbose_name='nazwa tublica'),
-            preserve_default=False,
-        ),
-    ]
Index: backend/core_app/migrations/0006_uploadedfile.py
===================================================================
diff --git a/backend/core_app/migrations/0006_uploadedfile.py b/backend/core_app/migrations/0006_uploadedfile.py
deleted file mode 100644
--- a/backend/core_app/migrations/0006_uploadedfile.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,22 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-11 11:02
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0005_remove_csvfile_progress_remove_csvfile_status_and_more'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='UploadedFile',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('file', models.FileField(upload_to='uploads/')),
-                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
-                ('file_type', models.CharField(max_length=10)),
-            ],
-        ),
-    ]
Index: backend/core_app/migrations/0002_remove_csvfile_title_delete_csvdata.py
===================================================================
diff --git a/backend/core_app/migrations/0002_remove_csvfile_title_delete_csvdata.py b/backend/core_app/migrations/0002_remove_csvfile_title_delete_csvdata.py
deleted file mode 100644
--- a/backend/core_app/migrations/0002_remove_csvfile_title_delete_csvdata.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,20 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-10 14:18
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='csvfile',
-            name='title',
-        ),
-        migrations.DeleteModel(
-            name='CSVData',
-        ),
-    ]
Index: backend/core_app/migrations/0004_csvfile_progress_csvfile_status_csvfile_total_rows.py
===================================================================
diff --git a/backend/core_app/migrations/0004_csvfile_progress_csvfile_status_csvfile_total_rows.py b/backend/core_app/migrations/0004_csvfile_progress_csvfile_status_csvfile_total_rows.py
deleted file mode 100644
--- a/backend/core_app/migrations/0004_csvfile_progress_csvfile_status_csvfile_total_rows.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,28 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-10 14:40
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0003_alter_csvfile_options'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='csvfile',
-            name='progress',
-            field=models.IntegerField(default=0),
-        ),
-        migrations.AddField(
-            model_name='csvfile',
-            name='status',
-            field=models.CharField(default='pending', max_length=20),
-        ),
-        migrations.AddField(
-            model_name='csvfile',
-            name='total_rows',
-            field=models.IntegerField(default=0),
-        ),
-    ]
Index: backend/core_app/migrations/0005_remove_csvfile_progress_remove_csvfile_status_and_more.py
===================================================================
diff --git a/backend/core_app/migrations/0005_remove_csvfile_progress_remove_csvfile_status_and_more.py b/backend/core_app/migrations/0005_remove_csvfile_progress_remove_csvfile_status_and_more.py
deleted file mode 100644
--- a/backend/core_app/migrations/0005_remove_csvfile_progress_remove_csvfile_status_and_more.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,31 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-10 19:27
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0004_csvfile_progress_csvfile_status_csvfile_total_rows'),
-    ]
-
-    operations = [
-        migrations.RemoveField(
-            model_name='csvfile',
-            name='progress',
-        ),
-        migrations.RemoveField(
-            model_name='csvfile',
-            name='status',
-        ),
-        migrations.RemoveField(
-            model_name='csvfile',
-            name='total_rows',
-        ),
-        migrations.AddField(
-            model_name='csvfile',
-            name='title',
-            field=models.CharField(default=1, max_length=100, verbose_name='nazwa tublica'),
-            preserve_default=False,
-        ),
-    ]
Index: backend/core_app/migrations/0011_alter_databasetable_options.py
===================================================================
diff --git a/backend/core_app/migrations/0011_alter_databasetable_options.py b/backend/core_app/migrations/0011_alter_databasetable_options.py
deleted file mode 100644
--- a/backend/core_app/migrations/0011_alter_databasetable_options.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,17 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-11 12:39
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0010_databasetable'),
-    ]
-
-    operations = [
-        migrations.AlterModelOptions(
-            name='databasetable',
-            options={'managed': False, 'verbose_name': 'Tabela bazy danych', 'verbose_name_plural': 'Tabele bazy danych'},
-        ),
-    ]
Index: backend/core_app/migrations/0010_databasetable.py
===================================================================
diff --git a/backend/core_app/migrations/0010_databasetable.py b/backend/core_app/migrations/0010_databasetable.py
deleted file mode 100644
--- a/backend/core_app/migrations/0010_databasetable.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,27 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-11 12:37
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0009_alter_uploadedfile_options_uploadedfile_table_name_and_more'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='DatabaseTable',
-            fields=[
-                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('table_name', models.CharField(max_length=100)),
-                ('row_count', models.IntegerField()),
-                ('created_at', models.DateTimeField(auto_now_add=True)),
-            ],
-            options={
-                'verbose_name': 'Database Table',
-                'verbose_name_plural': 'Database Tables',
-                'managed': False,
-            },
-        ),
-    ]
Index: backend/core_app/migrations/0012_alter_databasetable_options.py
===================================================================
diff --git a/backend/core_app/migrations/0012_alter_databasetable_options.py b/backend/core_app/migrations/0012_alter_databasetable_options.py
deleted file mode 100644
--- a/backend/core_app/migrations/0012_alter_databasetable_options.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ /dev/null	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
@@ -1,17 +0,0 @@
-# Generated by Django 5.1.4 on 2024-12-13 08:24
-
-from django.db import migrations
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('core_app', '0011_alter_databasetable_options'),
-    ]
-
-    operations = [
-        migrations.AlterModelOptions(
-            name='databasetable',
-            options={'managed': False, 'ordering': ['table_name'], 'verbose_name': 'Tabela bazy danych', 'verbose_name_plural': 'Tabele bazy danych'},
-        ),
-    ]
Index: backend/core_app/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\nimport logging\nimport re\n\nfrom django.db import models, transaction, connection\nfrom django.db.models import QuerySet\n\nlogger = logging.getLogger(__name__)\n\n\nclass DatabaseTableManager(models.Manager):\n    def get_queryset(self):\n        return DatabaseTableQuerySet(self.model, using=self._db)\n\n\nclass DatabaseTableQuerySet(models.QuerySet):\n    def count(self):\n        # Переопределяем метод count, чтобы избежать запроса к несуществующей таблице\n        return len(self._fetch_all())\n\n    def _fetch_all(self):\n        if self._result_cache is None:\n            with connection.cursor() as cursor:\n                cursor.execute(\"\"\"\n                    SELECT table_name \n                    FROM information_schema.tables \n                    WHERE table_schema = 'public'\n                    AND table_type = 'BASE TABLE'\n                    AND table_name NOT LIKE 'django_%'\n                    AND table_name NOT LIKE 'auth_%'\n                \"\"\")\n                tables = cursor.fetchall()\n\n                self._result_cache = []\n                for (table_name,) in tables:\n                    try:\n                        cursor.execute(f'SELECT COUNT(*) FROM \"{table_name}\"')\n                        count = cursor.fetchone()[0]\n                        self._result_cache.append(\n                            DatabaseTable(\n                                table_name=table_name,\n                                row_count=count\n                            )\n                        )\n                    except Exception as e:\n                        logger.error(f\"Error processing table {table_name}: {str(e)}\")\n        return self._result_cache\n\n\nclass DatabaseTable(models.Model):\n    table_name = models.CharField(\"Nazwa tabeli\", max_length=100, primary_key=True)\n    row_count = models.IntegerField(\"Liczba wierszy\")\n\n    objects = DatabaseTableManager()\n\n    class Meta:\n        managed = False\n        verbose_name = 'Tabela bazy danych'\n        verbose_name_plural = 'Tabele bazy danych'\n        ordering = ['table_name']\n\n    def __str__(self):\n        return f\"{self.table_name} ({self.row_count} wierszy)\"\n    def __str__(self):\n        return f\"{self.table_name} ({self.row_count} wierszy)\"\n\n    @classmethod\n    def get_all_tables(cls) -> QuerySet:\n        try:\n            # Создаем пустой QuerySet\n            qs = cls.objects.none()\n            table_objects = []\n\n            with connection.cursor() as cursor:\n                # Получаем список всех таблиц\n                cursor.execute(\"\"\"\n                    SELECT table_name \n                    FROM information_schema.tables \n                    WHERE table_schema = 'public'\n                    AND table_type = 'BASE TABLE'\n                    AND table_name NOT LIKE 'django_%'\n                    AND table_name NOT LIKE 'auth_%'\n                \"\"\")\n                tables = cursor.fetchall()\n\n                logger.info(f\"Found {len(tables)} tables in database\")\n\n                # Получаем количество строк для каждой таблицы\n                for (table_name,) in tables:\n                    try:\n                        cursor.execute(f\"SELECT COUNT(*) FROM \\\"{table_name}\\\"\")\n                        count = cursor.fetchone()[0]\n                        table_objects.append(\n                            cls(\n                                table_name=table_name,\n                                row_count=count\n                            )\n                        )\n                        logger.info(f\"Added table {table_name} with {count} rows\")\n                    except Exception as e:\n                        logger.error(f\"Error processing table {table_name}: {str(e)}\")\n\n            # Если есть объекты, создаем новый QuerySet с ними\n            if table_objects:\n                qs = cls.objects.all()\n                qs._result_cache = table_objects\n                logger.info(f\"Returning QuerySet with {len(table_objects)} tables\")\n            else:\n                logger.warning(\"No tables found in database\")\n\n            return qs\n        except Exception as e:\n            logger.error(f\"Error in get_all_tables: {str(e)}\")\n            return cls.objects.none()\n\n\nclass CSVFile(models.Model):\n    title = models.CharField(max_length=100, verbose_name='nazwa tublica')\n    file = models.FileField(upload_to='csv_files/')\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name = 'Plik CSV'\n        verbose_name_plural = 'Pliki CSV'\n\n    def __str__(self):\n        return self.title\n\n    def clean_column_name(self, name, existing_names):\n        if not name:\n            name = 'column'\n        clean_name = ''.join(e.lower() if e.isalnum() else '_' for e in name)\n        clean_name = clean_name.strip('_')\n\n        base_name = clean_name\n        counter = 1\n        while clean_name in existing_names:\n            clean_name = f\"{base_name}_{counter}\"\n            counter += 1\n\n        return clean_name\n\n    def save(self, *args, **kwargs):\n        is_new = self.pk is None\n        super().save(*args, **kwargs)\n\n        if is_new:  # Только для новых файлов\n            try:\n                with transaction.atomic():\n                    table_name = self.title.lower()\n                    table_name = ''.join(e if e.isalnum() else '_' for e in table_name)\n\n                    with connection.cursor() as cursor:\n                        cursor.execute(f'DROP TABLE IF EXISTS {table_name}')\n\n                        with self.file.open(mode='r') as file:\n                            csv_reader = csv.DictReader(file)\n                            original_headers = csv_reader.fieldnames\n\n                            existing_names = set()\n                            clean_headers = []\n                            header_mapping = {}\n\n                            for header in original_headers:\n                                if header:\n                                    clean_header = self.clean_column_name(header, existing_names)\n                                    clean_headers.append(clean_header)\n                                    existing_names.add(clean_header)\n                                    header_mapping[header] = clean_header\n\n                            columns = [f\"{header} TEXT\" for header in clean_headers]\n\n                            create_table_sql = f\"\"\"\n                            CREATE TABLE {table_name} (\n                                id SERIAL PRIMARY KEY,\n                                {', '.join(columns)}\n                            )\n                            \"\"\"\n                            cursor.execute(create_table_sql)\n\n                            insert_sql = f\"\"\"\n                            INSERT INTO {table_name} (\n                                {', '.join(clean_headers)}\n                            )\n                            VALUES ({', '.join(['%s' for _ in clean_headers])})\n                            \"\"\"\n\n                            # Читаем все строки разом\n                            file.seek(0)\n                            next(csv_reader)  # Пропускаем заголовки\n                            batch = [\n                                [row[header] for header in original_headers if header and header in header_mapping]\n                                for row in csv_reader\n                            ]\n\n                            # Вставляем все данные одним запросом\n                            if batch:\n                                cursor.executemany(insert_sql, batch)\n\n            except Exception as e:\n                raise Exception(f'Błąd podczas przetwarzania pliku CSV: {str(e)}')\n\n\nclass UploadedFile(models.Model):\n    file = models.FileField(upload_to='uploads/')\n    title = models.CharField(max_length=255)\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n    file_type = models.CharField(max_length=10)\n    table_name = models.CharField(max_length=63, blank=True)\n\n    def __str__(self):\n        return f\"{self.title} ({self.uploaded_at})\"\n\n    def clean_column_name(self, name):\n        \"\"\"Czyszczenie nazwy kolumny do użycia w PostgreSQL\"\"\"\n        # Zamień wszystkie znaki niealfanumeryczne na podkreślenie\n        clean_name = re.sub(r'[^\\w]', '_', name.lower())\n        # Usuń wielokrotne podkreślenia\n        clean_name = re.sub(r'_+', '_', clean_name)\n        # Usuń podkreślenia na początku i końcu\n        clean_name = clean_name.strip('_')\n\n        # Upewnij się, że nazwa nie zaczyna się od cyfry\n        if clean_name[0].isdigit():\n            clean_name = 'col_' + clean_name\n\n        return clean_name\n\n    def generate_unique_table_name(self, base_name):\n        \"\"\"Generowanie unikalnej nazwy tabeli\"\"\"\n        with connection.cursor() as cursor:\n            cursor.execute(\"\"\"\n                SELECT table_name \n                FROM information_schema.tables \n                WHERE table_schema = 'public'\n            \"\"\")\n            existing_tables = [row[0] for row in cursor.fetchall()]\n\n        table_name = base_name\n        counter = 1\n        while table_name in existing_tables:\n            table_name = f\"{base_name}_{counter}\"\n            counter += 1\n\n        return table_name\n\n    def save(self, *args, **kwargs):\n        is_new = self.pk is None\n        super().save(*args, **kwargs)\n\n        if is_new:\n            try:\n                with transaction.atomic():\n                    base_table_name = self.title.lower()\n                    base_table_name = ''.join(e if e.isalnum() else '_' for e in base_table_name)\n                    table_name = self.generate_unique_table_name(base_table_name)\n                    self.table_name = table_name\n\n                    with connection.cursor() as cursor:\n                        # Читаем файл как текст для подсчета строк\n                        with self.file.open(mode='r') as file:\n                            # Используем csv.reader вместо DictReader для точного подсчета\n                            csv_reader = csv.reader(file)\n                            headers = next(csv_reader)\n\n                            # Очищаем имена столбцов\n                            clean_headers = [self.clean_column_name(header) for header in headers if header]\n\n                            # Создаем таблицу\n                            create_table_sql = f\"\"\"\n                            CREATE TABLE {table_name} (\n                                id SERIAL PRIMARY KEY,\n                                {', '.join(f\"{header} TEXT\" for header in clean_headers)}\n                            )\n                            \"\"\"\n                            cursor.execute(create_table_sql)\n\n                            # SQL для вставки данных\n                            insert_sql = f\"\"\"\n                            INSERT INTO {table_name} (\n                                {', '.join(clean_headers)}\n                            )\n                            VALUES ({', '.join(['%s' for _ in clean_headers])})\n                            \"\"\"\n\n                            # Собираем все строки данных\n                            batch = []\n                            for row in csv_reader:\n                                # Берем только значения для непустых столбцов\n                                values = []\n                                col_idx = 0\n                                for cell in row:\n                                    if headers[col_idx]:\n                                        values.append(cell)\n                                    col_idx += 1\n                                batch.append(values)\n\n                            # Вставляем данные\n                            if batch:\n                                cursor.executemany(insert_sql, batch)\n\n                    super().save(update_fields=['table_name'])\n\n            except Exception as e:\n                raise Exception(f'Błąd podczas przetwarzania pliku: {str(e)}')\n\n    def delete(self, *args, **kwargs):\n        if self.table_name:\n            with connection.cursor() as cursor:\n                cursor.execute(f\"DROP TABLE IF EXISTS {self.table_name}\")\n        super().delete(*args, **kwargs)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/core_app/models.py b/backend/core_app/models.py
--- a/backend/core_app/models.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/core_app/models.py	(date 1734440908111)
@@ -1,7 +1,9 @@
 import csv
 import logging
 import re
+import uuid
 
+from django.contrib.auth import get_user_model
 from django.db import models, transaction, connection
 from django.db.models import QuerySet
 
@@ -309,3 +311,56 @@
             with connection.cursor() as cursor:
                 cursor.execute(f"DROP TABLE IF EXISTS {self.table_name}")
         super().delete(*args, **kwargs)
+
+User = get_user_model()
+
+class Section(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=255)
+    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sections')
+    order = models.IntegerField(default=0)
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    class Meta:
+        ordering = ['order', 'created_at']
+        unique_together = ['user', 'name']
+
+    def __str__(self):
+        return f"{self.name} - {self.user.email}"
+
+class Folder(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=255)
+    section = models.ForeignKey(Section, on_delete=models.CASCADE, related_name='folders')
+    order = models.IntegerField(default=0)
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    class Meta:
+        ordering = ['order', 'created_at']
+        unique_together = ['section', 'name']
+
+    def __str__(self):
+        return f"{self.name} - {self.section.name}"
+
+class FileRecord(models.Model):
+    FILE_TYPES = [
+        ('geojson', 'GeoJSON'),
+        ('kml', 'KML'),
+        ('shp', 'Shapefile'),
+        ('csv', 'CSV'),
+        ('gml', 'GML'),
+    ]
+
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=255)
+    folder = models.ForeignKey(Folder, on_delete=models.CASCADE, related_name='files')
+    file_type = models.CharField(max_length=10, choices=FILE_TYPES)
+    order = models.IntegerField(default=0)
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    class Meta:
+        ordering = ['order', 'created_at']
+        unique_together = ['folder', 'name']
+
+    def __str__(self):
+        return f"{self.name} ({self.file_type}) - {self.folder.name}"
\ No newline at end of file
Index: backend/core_app/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Generated by Django 5.1.4 on 2024-12-10 14:08\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CSVFile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=100)),\n                ('file', models.FileField(upload_to='csv_files/')),\n                ('uploaded_at', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='CSVData',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('row_data', models.JSONField()),\n                ('csv_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='core_app.csvfile')),\n            ],\n            options={\n                'ordering': ['id'],\n            },\n        ),\n    ]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/core_app/migrations/0001_initial.py b/backend/core_app/migrations/0001_initial.py
--- a/backend/core_app/migrations/0001_initial.py	(revision 2fe9c95c09806042c534ba5d8f6a8351ec12b917)
+++ b/backend/core_app/migrations/0001_initial.py	(date 1734441461429)
@@ -1,6 +1,8 @@
-# Generated by Django 5.1.4 on 2024-12-10 14:08
+# Generated by Django 5.1.4 on 2024-12-17 13:17
 
 import django.db.models.deletion
+import uuid
+from django.conf import settings
 from django.db import migrations, models
 
 
@@ -9,27 +11,88 @@
     initial = True
 
     dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
     ]
 
     operations = [
+        migrations.CreateModel(
+            name='DatabaseTable',
+            fields=[
+                ('table_name', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Nazwa tabeli')),
+                ('row_count', models.IntegerField(verbose_name='Liczba wierszy')),
+            ],
+            options={
+                'verbose_name': 'Tabela bazy danych',
+                'verbose_name_plural': 'Tabele bazy danych',
+                'ordering': ['table_name'],
+                'managed': False,
+            },
+        ),
         migrations.CreateModel(
             name='CSVFile',
             fields=[
                 ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('title', models.CharField(max_length=100)),
+                ('title', models.CharField(max_length=100, verbose_name='nazwa tublica')),
                 ('file', models.FileField(upload_to='csv_files/')),
                 ('uploaded_at', models.DateTimeField(auto_now_add=True)),
             ],
+            options={
+                'verbose_name': 'Plik CSV',
+                'verbose_name_plural': 'Pliki CSV',
+            },
         ),
         migrations.CreateModel(
-            name='CSVData',
+            name='UploadedFile',
             fields=[
                 ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('row_data', models.JSONField()),
-                ('csv_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='core_app.csvfile')),
+                ('file', models.FileField(upload_to='uploads/')),
+                ('title', models.CharField(max_length=255)),
+                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
+                ('file_type', models.CharField(max_length=10)),
+                ('table_name', models.CharField(blank=True, max_length=63)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Section',
+            fields=[
+                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
+                ('name', models.CharField(max_length=255)),
+                ('order', models.IntegerField(default=0)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to=settings.AUTH_USER_MODEL)),
             ],
             options={
-                'ordering': ['id'],
+                'ordering': ['order', 'created_at'],
+                'unique_together': {('user', 'name')},
+            },
+        ),
+        migrations.CreateModel(
+            name='Folder',
+            fields=[
+                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
+                ('name', models.CharField(max_length=255)),
+                ('order', models.IntegerField(default=0)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to='core_app.section')),
+            ],
+            options={
+                'ordering': ['order', 'created_at'],
+                'unique_together': {('section', 'name')},
+            },
+        ),
+        migrations.CreateModel(
+            name='FileRecord',
+            fields=[
+                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
+                ('name', models.CharField(max_length=255)),
+                ('file_type', models.CharField(choices=[('geojson', 'GeoJSON'), ('kml', 'KML'), ('shp', 'Shapefile'), ('csv', 'CSV'), ('gml', 'GML')], max_length=10)),
+                ('order', models.IntegerField(default=0)),
+                ('created_at', models.DateTimeField(auto_now_add=True)),
+                ('folder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core_app.folder')),
+            ],
+            options={
+                'ordering': ['order', 'created_at'],
+                'unique_together': {('folder', 'name')},
             },
         ),
     ]
